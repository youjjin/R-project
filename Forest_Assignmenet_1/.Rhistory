new_col <- c("Type", "Location", tt)
#under dplyr package methods
#install.packages("dplyr")
library(dplyr)
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
colnames(fine_dust_1) <- new_col
#under dplyr package methods
#install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
source('C:/Users/dbwls/Desktop/R/assignment.R', echo=TRUE)
library(dplyr)
install.packages("dplyr")
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
library(dplyr)
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
colnames(fine_dust_1) <- new_col
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T1:T24)) %>% mutate(SUM = T7 + T8 + T9) %>% select(Location, T7, T8, T9, SUM) %>% arrange(desc(SUM))
library(readxl)
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
library(readxl)
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
View(fine_dust)
fine_dust_1 <- fine_dust
colnames(fine_dust_1)[3] <- c("T1") #1시 <- T1
colnames(fine_dust_1)[3:ncol(fine_dust_1)] <- paste("T", gsub("시", "", colnames(fine_dust)[3:ncol(fine_dust)]), sep = "")
#gsub ; 특정값을 제거하고 특정값으로 바꿔준다!
ti <- c(1:24)
tt <- c()
for (i in 1:24)
{
tt[i] <- paste("T", ti[i], sep = "")
}
new_col <- c("Type", "Location", tt)
#under dplyr package methods
#install.packages("dplyr")
library(dplyr)
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
colnames(fine_dust_1) <- new_col
View(fine_dust)
View(fine_dust_1)
fine_dust_f <- fine_dust_1 %>% filter(!is.na(T1:T24))
fine_dust_f <- fine_dust_1 %>% filter(!is.na())
fine_dust_f <- fine_dust_1 %>% filter(!is.na(type))
fine_dust_f <- fine_dust_1 %>% filter(!is.na(T1))
colnames(fine_dust_1) <- new_col
fine_dust_f <- for (i in 1:24)
{
fine_dust_1 %>% filter(!is.na(tt[i]))
}
fine_dust_fs <- fine_dust_1 %>% filter(!is.na(T1+T2+T3+T4+T5+T6+T7+T8+T9+T10+T11+T12+T13+T14+T15+T16+T17+T18+T19+T20+T21+T22+T23+T24))
View(fine_dust_fs)
View(fine_dust_1)
View(fine_dust)
View(fine_dust_fs)
library(readxl)
library(dplyr)
library(reshape2)
library(ggplot2)
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
colnames(fine_dust_1)[3] <- c("T1") #1시 <- T1
colnames(fine_dust_1)[3:ncol(fine_dust_1)] <- paste("T", gsub("시", "", colnames(fine_dust)[3:ncol(fine_dust)]), sep = "")
#gsub ; 특정값을 제거하고 특정값으로 바꿔준다!
ti <- c(1:24)
tt <- c()
for (i in 1:24)
{
tt[i] <- paste("T", ti[i], sep = "")
}
new_col <- c("Type", "Location", tt)
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
colnames(fine_dust_1) <- new_col
f_melt <- melt(fine_dust_1)
f_melt <- melt(fine_dust_1, id = c("Type", "Location"))
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point() #x축과 y축을 설정!
Time_series_p + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif")) +
stat_summary(fun.y="Time", geom="line", shape=22, size=3, fill="pink")
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif")) + stat_summary(fun.y="Time", geom="line", shape=22, size=3, fill="pink")
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif")) +   stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="blue")
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point() #x축과 y축을 설정!
Time_series_p + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif")) +   stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="blue")
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="blue")
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="pink")
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="purple")
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="line", shape=22, size=3, fill="purple")
Time_series_p <- ggplot(data = f_plot, aes(x = Time, y = dust)) + geom_point() #x축과 y축을 설정!
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="line", shape=22, size=3, fill="purple")
Time_series_p + geom_boxplot()
View(f_plot)
library(readxl)
library(dplyr)
library(reshape2)
library(ggplot2)
setwd("C:/Users/dbwls/Desktop/Rstudio")
f_melt <- melt(fine_dust_1, id = c("Type", "Location"))
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="purple")
Time_series_p + geom_boxplot(aes(group = variable)) + stat_summary(fun.y="mean", geom="point", shape=22, size=3, fill="purple") + scale_fill_manual(name = "This is my title", values = c("pink", "green")
#under dplyr package methods
install.packages("RColorBrewe")
#under dplyr package methods
install.packages("RColorBrewer")
library("RColorBrewer")
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif")) + scale_fill_brewer(palette="Pastel2")
myPal <- RColorBrewer::brewer.pal(n = 5, name = "Pastel2")
f_melt <- melt(fine_dust_1, id = c("Type", "Location"))
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif")) + scale_fill_brewer(palette="Pastel2")
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_boxplot(aes(group = variable)) + scale_fill_brewer(palette="Pastel2")
myPal <- RColorBrewer::brewer.pal(n = 5, name = "Pastel2")
Time_series_p + geom_boxplot(aes(group = variable)) + scale_fill_brewer(palette="Pastel2")
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_boxplot() + scale_fill_brewer(palette="Pastel2")
Time_series_p + geom_boxplot() + scale_fill_brewer(palette="Pastel2")
library("RColorBrewer")
myPal <- RColorBrewer::brewer.pal(n = 5, name = "Pastel2")
Time_series_p + geom_boxplot(aes(group = variable)) %>% geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot() + scale_fill_brewer(palette="Pastel1")
Time_series_p + geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(fill = myPal, colour = "Pastels1", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(fill = myPal, colour = "Pastels1", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot()
diamonds %>%
ggplot2::ggplot(mapping = aes(y = price, x = cut, group = cut)) + # cut을 기준으로 그루핑
ggplot2::geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3) + # 앞서 저장한 myPal로 boxplot 색 채우기. 그 외 아웃라인과 이상치 색상도 지정
ggplot2::theme_classic() + # 그래프 테마 지정
ggplot2::theme(axis.title.x = element_text(size  = 10, face  = "italic", color = "gray", angle = 0, vjust = 0.5),
axis.title.y = element_text(size  = 10, face  = "bold.italic", color = "gray", angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정
ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시
View(Time_series_p)
diamonds %>%
ggplot2::ggplot(mapping = aes(x = variable, y = value, group = variable)) + # cut을 기준으로 그루핑
ggplot2::geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3) + # 앞서 저장한 myPal로 boxplot 색 채우기. 그 외 아웃라인과 이상치 색상도 지정
ggplot2::theme_classic() + # 그래프 테마 지정
ggplot2::theme(axis.title.x = element_text(size  = 10, face  = "italic", color = "gray", angle = 0, vjust = 0.5),
axis.title.y = element_text(size  = 10, face  = "bold.italic", color = "gray", angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정
ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시
diamonds %>%
ggplot2::ggplot(mapping = aes(x = variable, y = value, group = variable)) + # cut을 기준으로 그루핑
ggplot2::geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3) + # 앞서 저장한 myPal로 boxplot 색 채우기. 그 외 아웃라인과 이상치 색상도 지정
ggplot2::theme_classic() + # 그래프 테마 지정
ggplot2::theme(axis.title.x = element_text(size  = 10, face  = "italic", color = "gray", angle = 0, vjust = 0.5),
axis.title.y = element_text(size  = 10, face  = "bold.italic", color = "gray", angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정
ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시
diamonds %>%
ggplot2::ggplot(data = f_plot, aes(x = variable, y = value, group = variable)) + # cut을 기준으로 그루핑
ggplot2::geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3) + # 앞서 저장한 myPal로 boxplot 색 채우기. 그 외 아웃라인과 이상치 색상도 지정
ggplot2::theme_classic() + # 그래프 테마 지정
ggplot2::theme(axis.title.x = element_text(size  = 10, face  = "italic", color = "gray", angle = 0, vjust = 0.5),
axis.title.y = element_text(size  = 10, face  = "bold.italic", color = "gray", angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정
ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시
diamonds %>%
ggplot2::ggplot(data = f_plot, mapping = aes(x = variable, y = value, group = variable)) + # cut을 기준으로 그루핑
ggplot2::geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3) + # 앞서 저장한 myPal로 boxplot 색 채우기. 그 외 아웃라인과 이상치 색상도 지정
ggplot2::theme_classic() + # 그래프 테마 지정
ggplot2::theme(axis.title.x = element_text(size  = 10, face  = "italic", color = "gray", angle = 0, vjust = 0.5),
axis.title.y = element_text(size  = 10, face  = "bold.italic", color = "gray", angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정
ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시
diamonds %>%
ggplot2::ggplot(data = f_plot, mapping = aes(x = variable, y = value, group = variable)) + # cut을 기준으로 그루핑
ggplot2::geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)# 앞서 저장한 myPal로 boxplot 색 채우기. 그 외 아웃라인과 이상치 색상도 지정
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_boxplot(fill = myPal, colour = "snow4", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(fill = myPal, colour = "Pastel1", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(aes(group = variable), fill = myPal, colour = "Pastel1", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_boxplot()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = myPal, colour = "Pastel1", alpha = 0.5, outlier.color = "red", outlier.size = 0.3)
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = myPal, colour = "Pastel1")
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(aes(group = variable), fill = myPal)
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(aes(group = variable), fill=as.fator(value))
Time_series_p + geom_boxplot()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value), fill = myPal) + geom_point()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value), fill = myPal) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_boxplot()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value), fill = red) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Test plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p <- ggplot(data = f_plot, aes(x = Time, y = Dust)) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_boxplot()
Time_series_p <- ggplot(data = f_plot, aes(x = Time, y = Dust)) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = Dust))
Time_series_p + geom_boxplot()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
#Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable))
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(aes(group = variable), fill = 'Pastel1')
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(aes(group = variable), fill = '#FF99FF')
Time_series_p + geom_boxplot()
Time_series_p + geom_boxplot(aes(group = variable), fill = '#FF99FF')
Time_series_p + geom_boxplot(aes(group = variable), fill = myPal)
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value), fill='#FFCC33') + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#FF99FF')
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point(fill='#FFCC33')
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point(fill='#FFCC33') + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#FF99FF')
Time_series_p + geom_boxplot(aes(group = variable), fill = myPal, colour = "snow4")
Time_series_p + geom_boxplot(aes(group = variable), fill = '#FF99FF', outlier.color = '#FFCC33')
install.packages("scale")
library("scale")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library("scales")
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FFCC33')
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FFCC33')
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
library(readxl)
library(dplyr)
library(reshape2)
library(ggplot2)
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
colnames(fine_dust_1)[3] <- c("T1") #1시 <- T1
colnames(fine_dust_1)[3:ncol(fine_dust_1)] <- paste("T", gsub("시", "", colnames(fine_dust)[3:ncol(fine_dust)]), sep = "")
#gsub ; 특정값을 제거하고 특정값으로 바꿔준다!
ti <- c(1:24)
tt <- c()
for (i in 1:24)
{
tt[i] <- paste("T", ti[i], sep = "")
}
new_col <- c("Type", "Location", tt)
#under dplyr package methods
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
#under dplyr package methods
#install.packages("RColorBrewer")
#install.packages("scales")
library("scales")
library("RColorBrewer")
myPal <- RColorBrewer::brewer.pal(n = 5, name = "Pastel1")
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
library(readxl)
library(dplyr)
library(reshape2)
library(ggplot2)
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
colnames(fine_dust_1)[3] <- c("T1") #1시 <- T1
colnames(fine_dust_1)[3:ncol(fine_dust_1)] <- paste("T", gsub("시", "", colnames(fine_dust)[3:ncol(fine_dust)]), sep = "")
#gsub ; 특정값을 제거하고 특정값으로 바꿔준다!
ti <- c(1:24)
tt <- c()
for (i in 1:24)
{
tt[i] <- paste("T", ti[i], sep = "")
}
new_col <- c("Type", "Location", tt)
#under dplyr package methods
#install.packages("RColorBrewer")
#install.packages("scales")
library("scales")
library("RColorBrewer")
myPal <- RColorBrewer::brewer.pal(n = 5, name = "Pastel1")
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
colnames(fine_dust_1) <- new_col
f_melt <- melt(fine_dust_1)
f_melt <- melt(fine_dust_1, id = c("Type", "Location"))
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FFCC33')
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#006633') #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#006633') #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF00CC') #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FFFF00') #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') #이상치도 표시해주었다.
Time_series_p + geom_point() + ylim(20, 100) + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") + theme(text = element_text(size = 12, family = "serif"))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul's dust plot") #이상치도 표시해주었다.
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul dust plot") #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul dust plot (made by KYJ)") #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul dust plot (made by Yujin KWak)") #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("Seoul dust plot (made by Yujin Kwak)") #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("-Seoul dust plot- (made by Yujin Kwak)") #이상치도 표시해주었다.
View(f_melt)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T10 + T11)) %>% mutate(SUM = T10 + T11) %>% select(Location, T10, T11, SUM) %>% arrange(desc(SUM))
View(fine_dust_rush)
f_summ <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = mean(T10, na.rm = TRUE)) %>% arrange(desc(mean_dust))
library(dplyr)
f_summ <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = mean(T10, na.rm = TRUE)) %>% arrange(desc(mean_dust))
View(f_summ)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T10)) %>% mutate(SUM = T10) %>% select(Location, T10, SUM) %>% arrange(desc(SUM))
View(Time_series_p)
View(f_plot)
View(f_summ)
View(fine_dust)
View(fine_dust_1)
View(fine_dust_rush)
fine_dust_rush <- fine_dust_1 %>% group_by(Location) %>% filter(!is.na(T10)) %>% mutate(SUM = T10) %>% select(Location, T10, SUM) %>% arrange(desc(SUM))
View(fine_dust_rush)
fine_dust_rush <- fine_dust_1 %>% group_by(Location) %>% %>% summarize(mean_dust = mean(T10, na.rm = TRUE)) %>% arrange(desc(SUM))
fine_dust_rush <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = mean(T10, na.rm = TRUE)) %>% arrange(desc(SUM))
fine_dust_rush <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = sum(T10, na.rm = TRUE)) %>% arrange(desc(SUM))
fine_dust_rush <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = sum(T10, na.rm = TRUE)) %>% arrange(desc(sum))
f_summ <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = mean(T10, na.rm = TRUE)) %>% arrange(desc(mean_dust))
View(f_summ)
f_summ <- fine_dust_1 %>% group_by(Location) %>% summarize(mean_dust = mean(T10-T11, na.rm = TRUE)) %>% arrange(desc(mean_dust))
View(f_summ)
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("- 10/14 Seoul dust plot - (made by Yujin Kwak)") #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("- 2020-10-14 Seoul dust plot - (made by Yujin Kwak)") #이상치도 표시해주었다.
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + xlab("Time") + ylab("PM 2.5") + ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)") #이상치도 표시해주었다.
f_summ <- fine_dust_1 %>% group_by(T10) %>% summarize(mean_dust = mean(T10, na.rm = TRUE)) %>% arrange(desc(mean_dust))
View(f_summ)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T7+T8+T9)) %>% mutate(SUM = T7 + T8 + T9) %>% select(Location, T7, T8, T9, SUM) %>% arrange(desc(SUM))
View(fine_dust_rush)
fine_dust_fa <- fine_dust_1 %>% arrange(T10) %>% filter(!is.na(T10)) %>% select(Location, T10)
fine_dust_fa <- fine_dust_1 %>% arrange(T11) %>% filter(!is.na(T11)) %>% select(Location, T11)
fine_dust_fa <- fine_dust_1 %>% arrange(T10) %>% filter(!is.na(T10)) %>% select(Location, T10)
View(fine_dust_fa)
fine_dust_fa <- fine_dust_1 %>% arrange(T10, T11) %>% filter(!is.na(T10, T11)) %>% select(Location, T10, T11)
fine_dust_fa <- fine_dust_1 %>% arrange(T10) %>% filter(!is.na(T10)) %>% select(Location, T10) %>% arrange(T11) %>% filter(!is.na(T11)) %>% select(Location, T11)
fine_dust_fa <- fine_dust_1 %>% arrange(T10) %>% filter(!is.na(T10)) %>% select(Location, T10)
fine_dust_fa <- fine_dust_1 %>% arrange(T11) %>% filter(!is.na(T11)) %>% select(Location, T11)
View(fine_dust_fa)
fine_dust_multi <- fine_dust_1 %>% filter(!is.na(T10 + T11)) %>% arrange(T10) %>% arrange(T11) %>% select(Location, T10, T11)
View(fine_dust_multi)
fine_dust_multi <- fine_dust_1 %>% filter(!is.na(T10 + T11)) %>% arrange(T10) %>% arrange(T11) %>% select(Location, T10, T11)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T10+T11)) %>% mutate(Sub = T10-T11) %>% select(Location, T10, T11, Sub) %>% arrange(desc(Sub))
View(fine_dust_rush)
fine_dust_multi <- fine_dust_1 %>% filter(!is.na(T15 + T18)) %>% arrange(T15) %>% arrange(T18) %>% select(Location, T15, T18)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T15+T18)) %>% mutate(Sub = T15-T18) %>% select(Location, T15, T18, Sub) %>% arrange(desc(Sub))
View(fine_dust_rush)
fine_dust_multi <- fine_dust_1 %>% filter(!is.na(T15 + T19)) %>% arrange(T15) %>% arrange(T19) %>% select(Location, T15, T19)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T15+T19)) %>% mutate(Sub = T15-T19) %>% select(Location, T15, T19, Sub) %>% arrange(desc(Sub))
View(fine_dust_rush)
fine_dust_multi <- fine_dust_1 %>% filter(!is.na(T18 + T19)) %>% arrange(T18) %>% arrange(T19) %>% select(Location, T18, T19)
fine_dust_rush <- fine_dust_1 %>% filter(!is.na(T18+T19)) %>% mutate(Sub = T18-T19) %>% select(Location, T18, T19, Sub) %>% arrange(desc(Sub))
View(fine_dust_rush)
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
colnames(fine_dust_1)[3:ncol(fine_dust_1)] <- paste("T", gsub("시", "", colnames(fine_dust)[3:ncol(fine_dust)]), sep = "")
View(fine_dust_1)
View(fine_dust)
ti <- c(1:24)
tt <- c()
for (i in 1:24)
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
ti <- c(1:24)
tt <- c()
for (i in 1:24)
{
tt[i] <- paste("T", ti[i], sep = "")
}
new_col <- c("Type", "Location", tt)
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명") #index가 모두 영어로된 파일을 가질 수 있다!
colnames(fine_dust_1) <- new_col
View(fine_dust_1)
fine_dust_soungbuk <- fine_dust_1 %>% select(Location, [서울 성북구]성북구)
fine_dust_soungbuk <- fine_dust_1 %>% select(Location, %[서%울 성북구%]%성북구)
fine_dust_soungbuk <- fine_dust_1 %>% select(Location, nrow = 17)
View(fine_dust_soungbuk)
fine_dust_soungbuk <- fine_dust_1 %>% select(Location, name="[서울 성북구]성북구")
fine_dust_soungbuk <- fine_dust_1 %>% select(Location, name="성북구")
fine_dust_soungbuk <- fine_dust_1 %>% select(type, name="[서울 성북구]성북구")
fine_dust_soungbuk <- fine_dust_1 %>% select(type, ncol17)
fine_dust_soungbuk <- fine_dust_1 %>% select(Locatiom, ncol17)
fine_dust_soungbuk <- fine_dust_1 %>% select(Location, ncol17)
fine_dust_soungbuk <- fine_dust_1 %>% select(Location,  Location = "[서울 성북구]성북구구")
fine_dust_soungbuk <- fine_dust_1 %>% select(Location,  Location == "[서울 성북구]성북구구")
fine_dust_soungbuk <- fine_dust_1 %>% select(Location,  Location == "[서울 성북구]성북구구")
fine_dust_soungbuk <- read_xls("./soungbuk.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
fine_dust_soungbuk_1 <- fine_dust_soungbuk
#index가 모두 영어로된 파일생성
ti <- c(1:24)
#exel파일 불러오기
setwd("C:/Users/dbwls/Desktop/Rstudio")
#exel파일 불러오기
setwd("C:/Users/dbwls/Desktop/Rstudio")
fine_dust <- read_xls("./dust.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_soungbuk <- read_xls("./soungbuk.xls", na = "-", col_types = c("text", "text", rep("numeric", 24)))
fine_dust_1 <- fine_dust
fine_dust_soungbuk_1 <- fine_dust_soungbuk
#index가 모두 영어로된 파일생성
colnames(fine_dust_1)[3:ncol(fine_dust_1)] <- paste("T", gsub("시", "", colnames(fine_dust)[3:ncol(fine_dust)]), sep = "")
fine_dust_1 <- rename(fine_dust_1, Type = "측정망", Location = "측정소명")
View(fine_dust_1)
colnames(fine_dust_soungbuk_1)[3:ncol(fine_dust_soungbuk_1)] <- paste("T", gsub("시", "", colnames(fine_dust_soungbuk)[3:ncol(fine_dust_soungbuk)]), sep = "")
fine_dust_soungbuk_1 <- rename(fine_dust_soungbuk_1, Type = "측정망", Location = "측정소명")
View(fine_dust_soungbuk_1)
#그래프 그리기
f_melt <- melt(fine_dust_1)
f_melt <- melt(fine_dust_1, id = c("Type", "Location"))
f_soungbuk_melt <- melt(fine_dust_soungbuk_1)
f_soungbuk_melt <- melt(fine_dust_soungbuk_1, id = c("Type", "Location"))
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
f_soungbuk_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
ggplot(data = f_soungbuk_plot, aes(x = variable, y = value)) + geom_point() +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p <- ggplot(data = f_soungbuk_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p + ggplot(data = f_soungbuk_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point() + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point() + + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333')
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point() + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333')
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_sb <- geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333')
Time_series_sb <- geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') + geom_point()
Time_series_sb <- ggplot(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') + geom_point()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
f_soungbuk_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_sb <- ggplot(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') + geom_point()
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + Time_series_sb +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
View(f_soungbuk_plot)
View(f_soungbuk_melt)
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333')
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point(data = f_soungbuk_plot, aes(x = variable1, y = value1), color ='#FF3333')
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') +
xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p + geom_point(data = f_soungbuk_plot, aes(x = variable1, y = value1), color ='#FF3333') + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900')
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900')
View(f_soungbuk_plot)
View(f_melt)
View(f_soungbuk_melt)
View(f_soungbuk_plot)
View(f_soungbuk_plot)
View(f_soungbuk_melt)
View(f_soungbuk_plot)
f_plot <- f_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
f_soungbuk_plot <- f_soungbuk_melt %>% mutate(Time = paste("2020-10-14", gsub("T", "", variable), ":00:00", sep = " ")) %>% filter(!is.na(value))
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value)) + geom_point()
Time_series_p + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900')
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333')
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') +   xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966', outlier.color = '#FF9900') + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') +   xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
Time_series_p <- ggplot(data = f_plot, aes(x = variable, y = value))
Time_series_p + geom_boxplot(aes(group = variable), fill = '#999966') + geom_point(data = f_soungbuk_plot, aes(x = variable, y = value), color ='#FF3333') +   xlab("Time") + ylab("PM 2.5") +
ggtitle("- 2020.10.14 Seoul dust plot - (made by Yujin Kwak)")
